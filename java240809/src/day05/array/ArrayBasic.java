package day05.array;

public class ArrayBasic {

	public static void main(String[] args) {
		// 배열
		// 한 가지 타입(자료형)의 여러 개의 값을 하나의 보따리에 담는
		// 자료구조를 의미한다.
		// 담은 값들은 그 순서가 유지된다.(순서 유지)
		// 같은 값을 여러 개 보유할 수도 있다.(값의 중복 허용)
		// 담을 수 있는 값의 개수(배열의 길이)를 처음에 정해야 한다.
		// 이렇게 정해진 배열의 길이는 변경할 수 없다.
		
		// 배열의 선언
		// 1번째 쉬운 방법 : 값을 직접 넣는 방식
		// 간단하게 선언할 수 있는 방법이지만,
		// 선언과 동시에 초기화를 할 때만 사용할 수 있는 방법이다.
		int[] arrInt1 = {1, 3, 5};
//		int[] arrInt1; // 선언
//		arrInt1 = {1, 4, 2, 5}; // 선언과 동시에 초기화를 해야 한다는 경고 + 오류
		
		// 1번째 방법 + new
		int[] arrIntNew1;
		arrIntNew1 = new int[] {1, 3, 6, 2}; // 선언과 초기화를 분리해도 무방하다.
		
		// 2번째 방법
		// 배열의 길이를 미리 정해두는 방법
		// 배열의 자료형의 초기값이 자동으로 세팅된다.
		// 정수형 -> 0
		// 실수형 -> 0.0
		// 문자형 -> 공백문자
		// 논리형 -> false
		// 참조형(String, 클래스) -> null
		int[] arrIntNewLength = new int[10]; // 10개의 방을 가진 배열 생성
		System.out.println(arrIntNewLength[0]); // 0
		
		
		// 원시 자료형
		// 값 자체를 다루는 자료형으로
		// 원시 자료형을 대입하면 값 자체를 전달한다.
		int num1 = 3;
		int result = num1 + 1; // 4
		num1 = num1 + 2; // 5
		
//		System.out.println(result); // 4
		
		// 참조 자료형
		// 주소를 다루는 자료형으로
		// 주소값이 담겨 있으며, 이 주소값을 대입하면
		// 값이 전달되는 것이 아니라 값이 위치한 정보를 전달하기 때문에
		// 주소값에 소속된 값을 변경하면 같은 주소값을 가진 변수들은
		// 모두 같은 값을 "바라보게 된다."
		int[] arrInt = {1, 3, 5};
//		System.out.println(arrInt[0]); // 1
		
		int[] arrClone = arrInt;
		
		arrInt[0] = 3; // {3, 3, 5}
		
//		System.out.println(arrClone[0]);
		
		// ===============================
		String[] 아파트101호 = {"철수", "철수엄마", "철수아빠"};
		String[] 철수네집 = 아파트101호;
		String[] 철수엄마네집 = 아파트101호;
		
		철수네집[2] = "출근";
		
//		System.out.println(철수엄마네집[2]); // 출근
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
